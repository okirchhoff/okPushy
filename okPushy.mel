/////////////////////////////////////////////////////////////////
//
//    okPushy v1.2.2
//
//    by Oliver Kirchhoff (kirchhoff.oliver@gmail.com)
//    IMDB: http://www.imdb.com/name/nm0456285/ 
//
//    v1.0   (30/06/2014):  initial release
//    v1.1   (04/12/2014):  fixed the little scale bump that
//                          happened with small changes near
//                          the initial position while using
//                          scale compensation 
//    v1.2   (04/12/2014):  Fixed serious issues with pushing
//                          nurbs cv's 
//    v1.2.1 (04/12/2014):  Argh! Curve cv's and surface cv's
//                          are handled differently...
//    v1.2.2 (08/07/2016):  Fixed the issue of okPushy to fail
//                          if trying to use it on freshly created
//                          primitive objects
//	  v1.2.3 (20/10/2023):  Fixed the issue of okPushy to fail
//                          if trying to use it with more than one
//                          vertex.
// What it does:
//        This script changes the tool context. In this mode all
//        selected objects or components will be pushed in camera
//        space of the viewport in which the mouse is being clicked
//        and dragged left/right. The pivot of the objects is
//        used to calculate the "sliding rays". Therefor it works
//        best if the pivots are somehow in the center of the
//        objects. The tool can also be used on vertices, edges,
//        polygons and nurbs cv's like curves and surfaces.
//        Holding [Ctrl] while in this context makes the objects
//        scale at the same time while being pushed in camera space.
//        The perspective scale is being compensated this way.
//        This mode is turned on by default if the last tool 
//        context was scale tool rather than the move tool before
//        calling the okPushy context.
//
// usage: either call 'okPushyActivate()' as a permanent context
//        or call it temporarily on a press-and-hold-hotkey
//        and call 'okPushyDeactivate()' on the release-hotkey.
//        Holding [Ctrl] scales objects at the same time to keep
//        their size the same seen from the used viewport. This scale
//        mode is also active by default it the scale context was
//        the last used context before Pushy context.
//
// bugs:  this script fails with mixed type selections, like
//        vertices and objects at the same time.
//                
//
// toDo:  fix that bug!
//
/////////////////////////////////////////////////////////////////
///////// Copy this to your hotkey-press event:
// 
// if (!`exists okPushyActivate`) {
//      source "c:/the/path/to/the/script/please/replace/okPushy.mel";
// }
// okPushyActivate();
//
/////////////////////////////////////////////////////////////////
///////// Copy this to your hotkey-release event:
//
// okPushyDeactivate();
//
//
/////////////////////////////////////////////////////////////////

global int $devMode = 0; // set to 1 for debug infos, 0 for no debug infos


// Print Debug infos if in Dev mode
global proc _debug(int $linenum, string $info, string $value[])
{
	// if the global variable "devMode" is set to 1, then print debug infos
	global int $devMode;
	if ($devMode == 1) {
		for ($i=0; $i<size($value); $i++) {
			// print each line of the array
			print ("DEBUG -- line: "+$linenum + " >> " +$info + " = " +$value[$i]+"\n");
		}
	}
}


// reverses the order of a string array
global proc string[] stringArrayReverse(string $inArray[])
{
	string $outArray[];

    int $size = size($inArray);
    for ($member in $inArray) {
		// counting backwards
		$size--;  
		$outArray[$size] = $member;
    }
    
	_debug(95, "reverse string array", $outArray);
	
	return $outArray;
}


// returns the average of all given vectors
global proc vector averagePosition(vector $inVec[])
{
    vector $outVec = <<0,0,0>>;
    

    if (size($inVec) >1) {
		// add all vectors 
		for ($vec in $inVec) {
		    $outVec += $vec;
		}
		// devide the sum with the number of vectors
		$outVec = $outVec / size($inVec);
    } 
    else 
		$outVec = $inVec[0];
    
	_debug(120, "averagePos outVec", {string($outVec.x), string($outVec.y), string($outVec.z)});

    return $outVec;
}


// strips a given number of chars from "left" or "right" off the given string 
global proc string stripNumberOfChars(int $number, string $direction, string $input)
{
    string $output;
    if ($direction == "right")
		$output = `substring $input 1 (size($input)-$number)`;
    else
		$output = `substring $input ($number+1) (size($input))`;
    return $output;
}


// converts a range string like "2:6" to an int array like {2,3,4,5,6}
global proc int[] convertRangeString(string $rangeStr)
{
    int $out[];
    if (`gmatch $rangeStr "*:*"`) {
    	string $buffer[];
		tokenize $rangeStr ":" $buffer;
		for ($i = (int)$buffer[0]; $i <= (int)$buffer[1]; $i++){
		    $out[size($out)] = $i;
		}
    }
    else {
        $out[0] = (int)$rangeStr;
    }
    return $out;
}


// converts polyfaces and edges in vertex arrays
global proc string[] pointComponentList(string $sel[])
{
    // polyListComponentConversion returns arrays in the form [1:5] 
    string $verts[] = `polyListComponentConversion -tv $sel`;
    string $finalVerts[];

    // but we need the vertexes separated. [1:2] ==> [1],[2]
    for ($thing in $verts) {
		string $vBuffer[];
		tokenize $thing ":" $vBuffer;
	
		// it's an array if there is a ":" in the name
		if (size($vBuffer)>1) {
		    // keep the basename of the component for later
		    string $baseName[];
		    tokenize $thing "[" $baseName;
		    int $endNum = (int)(substituteAllString($vBuffer[1], "]", ""));
		    string $sBuffer[];
		    tokenize $vBuffer[0] "[" $sBuffer;
		    int $staNum = (int)$sBuffer[1];
		    int $i;
		    for ($i=$staNum; $i<=$endNum; $i++){
				$finalVerts[size($finalVerts)] = $baseName[0]+"["+$i+"]";
		    }
		} else {
		    $finalVerts[size($finalVerts)] = $thing;
		}
    }
    return $finalVerts;
}


// converts cv arrays of type [3:5][a:c] to array of single cv's [[3,a],[3,b],...] 
global proc string[] nurbsComponentList(string $sel[])
{
    string $finalCVs[];
    for ($nurbs in $sel) {
		string $buffer[];
		int $num = `tokenize $nurbs "[" $buffer`; // returns 2-3 buffers (baseName, cvU, cvV)
		string $baseName = $buffer[0];
		string $rangeA = stripNumberOfChars(1, "right", $buffer[1]); // "2:4]"
		int $ranA[] = convertRangeString($rangeA); // "2:4" -> {2,3,4}
		if ($num == 3) {
		    string $rangeB = stripNumberOfChars(1, "right", $buffer[2]); // -> "2:4"
		    int $ranB[] = convertRangeString($rangeB);
		    for ($iA in $ranA) {
				for ($iB in $ranB) {
				    $finalCVs[size($finalCVs)] = $baseName+"["+$iA+"]["+$iB+"]";
				}
		    }
		} else {
		    for ($iA in $ranA) {
				$finalCVs[size($finalCVs)] = $baseName+"["+$iA+"]";
		    }
		}
    }
    return $finalCVs;
}


// the click event of the Pushy context
global proc okPushyPressed()
{
    // let's memorize a few things for the drag event
    global string $okPushyCamera;        	// the camera
    global vector $okPushyVectors[];        // the vector array
    global float  $okPushyStartPos[];       // the click screen position
    global string $objectsList[];        	// the selected objects
    global vector $okPushyObjScales[];      // the individual scale of the objects
    global vector $okPushyCameraPos;        // the camera world position
    global string $modifier;            	// the modifier key (CTRL)
    global string $okPushyMode = "object";  // 'object' or 'component' selection
    global int    $okPushyCamMode = 0;      // 0=perspective, 1=orthographic
    global string $formerContext;        	// last tool context before Pushy
    
    // We might have values in the arrays already. Let's clear arrays first!
    $okPushyVectors     = {};
    $objectsList     	= {};
    $okPushyObjScales   = {};

    // get me the camera of the active viewport.
    string $activePanel = `playblast -activeEditor`;
    setFocus $activePanel;
    $okPushyCamera  = `modelEditor -query -camera $activePanel`;
    string $out[] = `ls -st $okPushyCamera`;
    string $camShapes[];
    
    // first we need to be sure what is the transform of the camera
    // but we also need the shape
    if ($out[1] == "transform"){
        $camShapes = `listRelatives -s $okPushyCamera`;
    }
    else {
        $camShapes = {$okPushyCamera};
        string $okPushyCameraTemp[] = `listRelatives -p $camShapes[0]`;
        $okPushyCamera = $okPushyCameraTemp[0];
    }
    
    //  Is it orthographic?
    if (attributeExists( "orthographic", $camShapes[0])) {
        $okPushyCamMode = `getAttr ($camShapes[0]+".orthographic")`;
    }
    
    // let's take care of the objects
    string $selection[] =`ls -sl`;
    
    // check if selection is a subcomponent (vtx, edge, poly, cv)
    string $showType[] = `ls -st $selection[0]`;
	_debug(264, "showType", $showType);

    if ($showType[1] == "float3") {
		// convert poly and edge selections to vtx array
		$selection = pointComponentList($selection);
		$okPushyMode = "component";
    }
    if ($showType[1] == "double3") {
		// convert cv lists to array of cv's
		$selection = nurbsComponentList($selection);
		$okPushyMode = "component";
    }
    // remove all non-transform selections in object mode (bug fix)
    if ($okPushyMode == "object") {
		for ($obj in $selection) {
    		string $type[] = `ls -st $obj`;
    		if ($type[1] != "transform") {
        		select -d $type[0];
    		}
		}
	}
	
	// if the selection is empty, we don't need to do anything
    if (size($selection) > 0 ) {
		if ($okPushyCamMode == 0) {
		    $okPushyCameraPos = `xform -q -ws -t $okPushyCamera`;
		    
		    // Array with first index reserved for the average of all objects
		    $objectsList = stringArrayCatenate({"NONE"}, $selection);

		    // calculate average position
		    vector $positions[];

			_debug(297, "objectsList", $objectsList);

		    for ($obj in $objectsList) {
				if ($obj != "NONE")
					
					//append position of the object to the positions array
					$positions[size($positions)] = `xform -q -ws -t $obj`;
		    }
		    
		    vector $averagePos = averagePosition($positions);
		    
		    // store individual vector from average pos to objects
		    for ($obj in $objectsList) {
				int $index = size($okPushyVectors);
				if ($obj == "NONE") {
				    // store the vector camera to average position
				    $okPushyVectors[$index] = $okPushyCameraPos - $averagePos;
				    $okPushyObjScales[$index] = <<1,1,1>>;
				} else {
				    // store the vectors from average position to individual positions
				    vector $oPos = $positions[$index-1];
				    $okPushyVectors[$index] =  $averagePos - $oPos;
				    // store the scale of the objects
				    $okPushyObjScales[$index] = `xform -r -q -s $obj`;
				}
		    }
		} else {
		    print "\northographic camera";
		}
    }

    $okPushyStartPos = `draggerContext -query -anchorPoint okPushyContext`;
    $modifier   = `draggerContext -query -modifier okPushyContext`;

}


// the drag event of the Pushy context
global proc okPushyDrag()
{
    // let's recall a few things from the click event
    global string $okPushyCamera;    	// the camera
    global vector $okPushyVectors[];    // the vector array
    global float  $okPushyStartPos[];   // the click screen position
    global string $objectsList[];    	// the selected objects
    global vector $okPushyObjScales[];  // the individual scale of the objects
    global vector $okPushyCameraPos;    // the camera world position
    global string $modifier;        	// the modifier key (CTRL)
    global string $okPushyMode;        	// 'object' or 'component' selection
    global int    $okPushyCamMode;    	// 0=perspective, 1=orthographic
    global string $formerContext;    	// last tool context before Pushy
    
    float $sensitivity = 0.005;

    float $okPushyScreenPos[] = `draggerContext -query -dragPoint okPushyContext`;

    // push in perspective camera viewport
    if ($okPushyCamMode == 0) {
		float $changeDepth = 1 + (($okPushyScreenPos[0] - $okPushyStartPos[0]) *$sensitivity);
		float $scale = 1;
	
		// is CTRL pressed? then objects also scale (or if scale context was active before Pushy)
		if ($modifier == "ctrl" || $formerContext == "scaleSuperContext"){
			// scales the individual vectors as well
		    $scale = $changeDepth;
		}
		int $index = 0;
		vector $averagePos = $okPushyCameraPos - $okPushyVectors[0] * $changeDepth;
		for ($obj in $objectsList) {
		    
		    // skip the first object because it's "NONE"
		    if ($index > 0) {
				vector $newPos = $averagePos - $okPushyVectors[$index] * $scale;
				xform -ws -t ($newPos.x) ($newPos.y) ($newPos.z) $obj;
				
				// change transform scale if CTRL is pressed and not in component mode
				if (($modifier == "ctrl" || $formerContext == "scaleSuperContext") && $scale != 1 && $okPushyMode == "object") {
				    vector $newScale = $okPushyObjScales[$index] * $scale;
				    xform -s ($newScale.x) ($newScale.y) ($newScale.z) $obj;
				}
		    }
		    $index++;
		}

    }
    // push in orthographic camera viewport
    else {
    
    }
    
    refresh -force;

}


// the activation of the Pushy context
global proc okPushyActivate()
{
    string $activePanel = `playblast -activeEditor`;
    setFocus $activePanel;
    modelEditor -e -av $activePanel;
    
    // remember current context for deactivation of Pushy context
    global string $formerContext;
    $formerContext = `currentCtx`;

    if (`draggerContext -exists okPushyContext`) deleteUI okPushyContext;

    draggerContext
		-cursor "dolly"
		-pressCommand "okPushyPressed"
		-dragCommand "okPushyDrag"
		-space "screen"
		-name "Pushy"
		-undoMode "step"
		okPushyContext;

    setToolTo okPushyContext;    
}


// de-activation of the context and activation of the previous context
global proc okPushyDeactivate()
{
    global string $formerContext;
    setToolTo $formerContext;
}
